# Generated from Punto 4/gramatica.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,314,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,3,1,88,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,100,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,110,8,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,120,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,130,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,140,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,154,8,7,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,162,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,3,9,174,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,188,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,3,11,198,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,3,26,239,8,26,1,27,1,27,1,27,1,27,1,27,
        1,27,3,27,247,8,27,1,28,1,28,1,28,1,28,5,28,253,8,28,10,28,12,28,
        256,9,28,1,28,1,28,1,28,1,28,1,28,5,28,263,8,28,10,28,12,28,266,
        9,28,1,28,3,28,269,8,28,1,29,4,29,272,8,29,11,29,12,29,273,1,30,
        1,30,1,31,1,31,4,31,280,8,31,11,31,12,31,281,1,32,4,32,285,8,32,
        11,32,12,32,286,1,32,1,32,5,32,291,8,32,10,32,12,32,294,9,32,1,32,
        1,32,4,32,298,8,32,11,32,12,32,299,3,32,302,8,32,1,33,1,33,1,34,
        1,34,1,35,4,35,309,8,35,11,35,12,35,310,1,35,1,35,0,0,36,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,33,1,0,
        5,2,0,39,39,92,92,2,0,34,34,92,92,1,0,48,57,2,0,65,90,97,122,3,0,
        9,10,13,13,32,32,338,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,71,1,0,0,0,1,73,1,0,
        0,0,3,87,1,0,0,0,5,99,1,0,0,0,7,109,1,0,0,0,9,119,1,0,0,0,11,129,
        1,0,0,0,13,139,1,0,0,0,15,153,1,0,0,0,17,161,1,0,0,0,19,173,1,0,
        0,0,21,187,1,0,0,0,23,197,1,0,0,0,25,199,1,0,0,0,27,201,1,0,0,0,
        29,203,1,0,0,0,31,205,1,0,0,0,33,207,1,0,0,0,35,209,1,0,0,0,37,211,
        1,0,0,0,39,213,1,0,0,0,41,215,1,0,0,0,43,217,1,0,0,0,45,219,1,0,
        0,0,47,222,1,0,0,0,49,224,1,0,0,0,51,227,1,0,0,0,53,238,1,0,0,0,
        55,246,1,0,0,0,57,268,1,0,0,0,59,271,1,0,0,0,61,275,1,0,0,0,63,279,
        1,0,0,0,65,301,1,0,0,0,67,303,1,0,0,0,69,305,1,0,0,0,71,308,1,0,
        0,0,73,74,5,59,0,0,74,2,1,0,0,0,75,76,5,67,0,0,76,77,5,82,0,0,77,
        78,5,69,0,0,78,79,5,65,0,0,79,80,5,84,0,0,80,88,5,69,0,0,81,82,5,
        99,0,0,82,83,5,114,0,0,83,84,5,101,0,0,84,85,5,97,0,0,85,86,5,116,
        0,0,86,88,5,101,0,0,87,75,1,0,0,0,87,81,1,0,0,0,88,4,1,0,0,0,89,
        90,5,84,0,0,90,91,5,65,0,0,91,92,5,66,0,0,92,93,5,76,0,0,93,100,
        5,69,0,0,94,95,5,116,0,0,95,96,5,97,0,0,96,97,5,98,0,0,97,98,5,108,
        0,0,98,100,5,101,0,0,99,89,1,0,0,0,99,94,1,0,0,0,100,6,1,0,0,0,101,
        102,5,70,0,0,102,103,5,82,0,0,103,104,5,79,0,0,104,110,5,77,0,0,
        105,106,5,102,0,0,106,107,5,114,0,0,107,108,5,111,0,0,108,110,5,
        109,0,0,109,101,1,0,0,0,109,105,1,0,0,0,110,8,1,0,0,0,111,112,5,
        82,0,0,112,113,5,69,0,0,113,114,5,65,0,0,114,120,5,68,0,0,115,116,
        5,114,0,0,116,117,5,101,0,0,117,118,5,97,0,0,118,120,5,100,0,0,119,
        111,1,0,0,0,119,115,1,0,0,0,120,10,1,0,0,0,121,122,5,73,0,0,122,
        123,5,78,0,0,123,124,5,84,0,0,124,130,5,79,0,0,125,126,5,105,0,0,
        126,127,5,110,0,0,127,128,5,116,0,0,128,130,5,111,0,0,129,121,1,
        0,0,0,129,125,1,0,0,0,130,12,1,0,0,0,131,132,5,82,0,0,132,133,5,
        79,0,0,133,134,5,87,0,0,134,140,5,83,0,0,135,136,5,114,0,0,136,137,
        5,111,0,0,137,138,5,119,0,0,138,140,5,115,0,0,139,131,1,0,0,0,139,
        135,1,0,0,0,140,14,1,0,0,0,141,142,5,85,0,0,142,143,5,80,0,0,143,
        144,5,68,0,0,144,145,5,65,0,0,145,146,5,84,0,0,146,154,5,69,0,0,
        147,148,5,117,0,0,148,149,5,112,0,0,149,150,5,100,0,0,150,151,5,
        97,0,0,151,152,5,116,0,0,152,154,5,101,0,0,153,141,1,0,0,0,153,147,
        1,0,0,0,154,16,1,0,0,0,155,156,5,83,0,0,156,157,5,69,0,0,157,162,
        5,84,0,0,158,159,5,115,0,0,159,160,5,101,0,0,160,162,5,116,0,0,161,
        155,1,0,0,0,161,158,1,0,0,0,162,18,1,0,0,0,163,164,5,87,0,0,164,
        165,5,72,0,0,165,166,5,69,0,0,166,167,5,82,0,0,167,174,5,69,0,0,
        168,169,5,119,0,0,169,170,5,104,0,0,170,171,5,101,0,0,171,172,5,
        114,0,0,172,174,5,101,0,0,173,163,1,0,0,0,173,168,1,0,0,0,174,20,
        1,0,0,0,175,176,5,68,0,0,176,177,5,69,0,0,177,178,5,76,0,0,178,179,
        5,69,0,0,179,180,5,84,0,0,180,188,5,69,0,0,181,182,5,100,0,0,182,
        183,5,101,0,0,183,184,5,108,0,0,184,185,5,101,0,0,185,186,5,116,
        0,0,186,188,5,101,0,0,187,175,1,0,0,0,187,181,1,0,0,0,188,22,1,0,
        0,0,189,190,5,78,0,0,190,191,5,85,0,0,191,192,5,76,0,0,192,198,5,
        76,0,0,193,194,5,110,0,0,194,195,5,117,0,0,195,196,5,108,0,0,196,
        198,5,108,0,0,197,189,1,0,0,0,197,193,1,0,0,0,198,24,1,0,0,0,199,
        200,5,46,0,0,200,26,1,0,0,0,201,202,5,44,0,0,202,28,1,0,0,0,203,
        204,5,42,0,0,204,30,1,0,0,0,205,206,5,40,0,0,206,32,1,0,0,0,207,
        208,5,41,0,0,208,34,1,0,0,0,209,210,5,61,0,0,210,36,1,0,0,0,211,
        212,5,33,0,0,212,38,1,0,0,0,213,214,5,45,0,0,214,40,1,0,0,0,215,
        216,5,43,0,0,216,42,1,0,0,0,217,218,5,62,0,0,218,44,1,0,0,0,219,
        220,5,62,0,0,220,221,5,61,0,0,221,46,1,0,0,0,222,223,5,60,0,0,223,
        48,1,0,0,0,224,225,5,60,0,0,225,226,5,61,0,0,226,50,1,0,0,0,227,
        228,5,33,0,0,228,229,5,61,0,0,229,52,1,0,0,0,230,231,5,65,0,0,231,
        232,5,78,0,0,232,239,5,68,0,0,233,234,5,97,0,0,234,235,5,110,0,0,
        235,239,5,100,0,0,236,237,5,38,0,0,237,239,5,38,0,0,238,230,1,0,
        0,0,238,233,1,0,0,0,238,236,1,0,0,0,239,54,1,0,0,0,240,241,5,79,
        0,0,241,247,5,82,0,0,242,243,5,111,0,0,243,247,5,114,0,0,244,245,
        5,124,0,0,245,247,5,124,0,0,246,240,1,0,0,0,246,242,1,0,0,0,246,
        244,1,0,0,0,247,56,1,0,0,0,248,254,5,39,0,0,249,253,8,0,0,0,250,
        251,5,92,0,0,251,253,9,0,0,0,252,249,1,0,0,0,252,250,1,0,0,0,253,
        256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,
        254,1,0,0,0,257,269,5,39,0,0,258,264,5,34,0,0,259,263,8,1,0,0,260,
        261,5,92,0,0,261,263,9,0,0,0,262,259,1,0,0,0,262,260,1,0,0,0,263,
        266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,
        264,1,0,0,0,267,269,5,34,0,0,268,248,1,0,0,0,268,258,1,0,0,0,269,
        58,1,0,0,0,270,272,3,67,33,0,271,270,1,0,0,0,272,273,1,0,0,0,273,
        271,1,0,0,0,273,274,1,0,0,0,274,60,1,0,0,0,275,276,3,65,32,0,276,
        62,1,0,0,0,277,280,3,69,34,0,278,280,3,67,33,0,279,277,1,0,0,0,279,
        278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        64,1,0,0,0,283,285,3,67,33,0,284,283,1,0,0,0,285,286,1,0,0,0,286,
        284,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,292,5,46,0,0,289,
        291,3,67,33,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
        293,1,0,0,0,293,302,1,0,0,0,294,292,1,0,0,0,295,297,5,46,0,0,296,
        298,3,67,33,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,
        300,1,0,0,0,300,302,1,0,0,0,301,284,1,0,0,0,301,295,1,0,0,0,302,
        66,1,0,0,0,303,304,7,2,0,0,304,68,1,0,0,0,305,306,7,3,0,0,306,70,
        1,0,0,0,307,309,7,4,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,
        1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,6,35,0,0,313,72,
        1,0,0,0,27,0,87,99,109,119,129,139,153,161,173,187,197,238,246,252,
        254,262,264,268,273,279,281,286,292,299,301,310,1,0,1,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    CREATE = 2
    TABLE = 3
    FROM = 4
    READ = 5
    INTO = 6
    ROWS = 7
    UPDATE = 8
    SET = 9
    WHERE = 10
    DELETE = 11
    NULL = 12
    DOT = 13
    COMMA = 14
    ASTERISK = 15
    LEFT_PARENTHESIS = 16
    RIGHT_PARENTHESIS = 17
    EQUALS = 18
    NOT = 19
    MINUS = 20
    PLUS = 21
    GT = 22
    GE = 23
    LT = 24
    LE = 25
    NE = 26
    AND = 27
    OR = 28
    QUOTED_STRING = 29
    INTEGER_VALUE = 30
    DECIMAL_VALUE = 31
    IDENTIFIER = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'.'", "','", "'*'", "'('", "')'", "'='", "'!'", "'-'", 
            "'+'", "'>'", "'>='", "'<'", "'<='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "TABLE", "FROM", "READ", "INTO", "ROWS", "UPDATE", 
            "SET", "WHERE", "DELETE", "NULL", "DOT", "COMMA", "ASTERISK", 
            "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "EQUALS", "NOT", "MINUS", 
            "PLUS", "GT", "GE", "LT", "LE", "NE", "AND", "OR", "QUOTED_STRING", 
            "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", "WS" ]

    ruleNames = [ "T__0", "CREATE", "TABLE", "FROM", "READ", "INTO", "ROWS", 
                  "UPDATE", "SET", "WHERE", "DELETE", "NULL", "DOT", "COMMA", 
                  "ASTERISK", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "EQUALS", 
                  "NOT", "MINUS", "PLUS", "GT", "GE", "LT", "LE", "NE", 
                  "AND", "OR", "QUOTED_STRING", "INTEGER_VALUE", "DECIMAL_VALUE", 
                  "IDENTIFIER", "DECIMAL_DIGITS", "DIGIT", "LETTER", "WS" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


